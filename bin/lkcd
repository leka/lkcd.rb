#!/usr/bin/env ruby
require 'gli'
require 'lkcd'
require 'pp'
require 'yaml'
require 'json'

include GLI::App

program_desc 'Command Line Tool to manage Leka\'s Curriculum data'

version Lkcd::VERSION

subcommand_option_handling :normal
arguments :strict

accept Array do |value|
	value.split(/,/).map(&:strip)
end

desc 'Example command to understand how everything works'
# arg_name 'name compliment'
command :sayhi do |c|
	c.desc 'You are amazing'
	c.switch :a

	c.desc 'You are beautiful'
	c.switch :b

	c.desc 'Your name'
	c.flag [:n, :name]
	c.action do |global_options,options,args|

		compliment = options[:a] ? 'You are amazing. ' : ''
		compliment += options[:b] ? 'You are beautiful. ' : ''

		puts "Hello #{sayHi(options[:name]) + ". " + compliment}"

	end
end

desc 'Describe pdf here'
arg_name 'Describe arguments to pdf here'
command :combine do |c|
	c.action do |global_options,options,args|
		puts "pdf command ran"
	end
end

desc 'Describe pdf here'
arg_name 'Describe arguments to pdf here'
command :divide do |c|

	c.desc 'The curriculum language'
	c.flag [:l, :lang, :language]

	c.desc 'The curriculum number'
	c.flag [:c, :curriculum]

	c.action do |global_options,options,args|

		divide(options[:language], options[:curriculum])

	end
end

desc 'Describe pdf here'
arg_name 'Describe arguments to pdf here'
command :json do |c|
	c.action do |global_options,options,args|
		puts "pdf command ran"
	end
end

desc 'Describe pdf here'
arg_name 'Describe arguments to pdf here'
command :docx do |c|
	c.action do |global_options,options,args|
		puts LKDir::OUTPUT_DIR
		puts Lkcd::VERSION
		puts "pdf command ran"
	end
end

desc 'Describe pdf here'
arg_name 'Describe arguments to pdf here'
command :pdf do |c|

	c.desc 'The curriculum language'
	c.flag [:l, :lang, :language]

	c.desc 'The curriculum number'
	c.flag [:c, :curriculum]

	c.action do |global_options,options,args|

		pdf(options[:language], options[:curriculum])

	end
end

desc 'Connect your Github account'
arg_name '-u ladislas -p myP@ssword2018'
command :connect do |c|
	c.desc 'Your Github username'
	c.flag [:u, :username]

	c.desc 'Your Github password or token'
	c.flag [:p, :password]

	c.action do |global_options,options,args|

		n = Netrc.read
		n["api.Github.com"] = options[:username], options[:password]
		n.save

		puts "Successfully saved credentials"

	end
end

desc 'Pull curriculum and lesson data from Github'
arg_name '--curriculum=c2 --stage=ready'
command :pull do |c|
	c.desc 'The curriculum(s) you want to pull'
	c.flag [:c, :curriculum],
		# :must_match =>
		:type => Array

	c.desc 'The stage of the curriculum'
	c.flag [:s, :stage],
		:must_match => ["in progress", "needs review", "ready"],
		:default_value => "ready",
		:type => Array

	c.desc 'Pull all curriculums'
	c.switch [:a, :all, 'all-curriculums'], :negatable => false

	c.action do |global_options,options,args|

		types = []
		curriculums = []
		stages = ['ready']

		client = Octokit::Client.new(:netrc => true)
		client.login

		issues = client.list_issues('leka/LKCurriculumsData')

		if options[:all]
			get_all_curriculums(issues)
		else

		end

		puts



		# labels = (stage + type + curriculums).join(',')

		# puts labels

		# issues = client.list_issues('leka/LKCurriculumsData', :labels => labels)


	end
end

pre do |global,command,options,args|
	# Pre logic here
	# Return true to proceed; false to abort and not call the
	# chosen command
	# Use skips_pre before a command to skip this block
	# on that command only
	true
end

post do |global,command,options,args|
	# Post logic here
	# Use skips_post before a command to skip this
	# block on that command only
end

on_error do |exception|
	# Error logic here
	# return false to skip default error handling
	true
end

exit run(ARGV)
